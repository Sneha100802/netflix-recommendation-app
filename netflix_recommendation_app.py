# -*- coding: utf-8 -*-
"""Netflix Recommendation App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_oZy-ddE7KOZNTWLxfP_pJzHuy9RkobR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import ipywidgets as widgets
from IPython.display import display
from IPython.display import HTML,display
import streamlit as st
warnings.filterwarnings('ignore')

# Streamlit file uploader
uploaded_file = st.file_uploader("Upload netflix_titles CSV", type=["csv"])
# Initialize df to None to avoid NameError if no file is uploaded
df = None
if uploaded_file is not None:
    # Load the dataset
    @st.cache_data
    def load_data():
        df = pd.read_csv(uploaded_file)
        return df

    df = load_data()
else:
    st.warning("Please upload a CSV file to proceed.")
    st.stop()  # Stop execution if no file is uploaded

# Check if df is loaded before proceeding
if df is not None:
    # Fill missing values
    df['cast'].fillna('Unknown', inplace=True)
    df['country'].fillna('Unknown', inplace=True)
    df['director'].fillna('Unknown', inplace=True)

    # Combine relevant columns for search
    df['combined_features'] = df['title'] + ' ' + df['cast'] + ' ' + df['director'] + ' ' + df['listed_in'] + ' ' + df['description']
else:
    st.error("DataFrame 'df' is not loaded. Please ensure a file is uploaded.")
    # Streamlit file uploader
uploaded_file = st.file_uploader("Upload netflix_titles CSV", type=["csv"])

# Initialize df to None to avoid NameError if no file is uploaded
df = None

if uploaded_file is not None:
    # Load the dataset
    @st.cache_data
    def load_data():
        df = pd.read_csv(uploaded_file)
        return df

    df = load_data()
    # Create a TF-IDF Vectorizer
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(df['combined_features'])
else:
    st.warning("Please upload a CSV file to proceed.")
    st.stop()  # Stop execution if no file is uploaded

# Function to get recommendations
def get_recommendations(query, top_n=5, content_type='All'):
    query_vec = tfidf.transform([query])
    cosine_similarities = cosine_similarity(query_vec, tfidf_matrix).flatten()
    top_indices = cosine_similarities.argsort()[-top_n:][::-1]
    recommendations = df.iloc[top_indices]
    if content_type != 'All':
        recommendations = recommendations[recommendations['type'] == content_type]
    return recommendations

# Streamlit App
st.title("ðŸŽ¬ Netflix Recommendation App")
st.markdown("Welcome to the Netflix Recommendation App! Enter your preferences below to get personalized recommendations.")

# Input widgets
query = st.text_input("Enter a genre, actor, or keyword...", placeholder="e.g., comedy, Tom Hanks")
content_type = st.selectbox("Type", ['All', 'Movie', 'TV Show'])
top_n = st.slider("Number of Recommendations", 1, 20, 5)

# Get recommendations
if st.button("Get Recommendations"):
    if query:
        st.write(f"Searching for: **{query}**")
        recommendations = get_recommendations(query, top_n=top_n, content_type=content_type)
        st.write(f"Here are your top **{top_n}** recommendations:")
        st.dataframe(recommendations[['title', 'type', 'listed_in', 'description']])

        # Example: Add a bar chart using seaborn
        st.write("### Distribution of Recommendations by Type")
        type_counts = recommendations['type'].value_counts()
        plt.figure(figsize=(8, 4))
        sns.barplot(x=type_counts.index, y=type_counts.values, palette=['#E50914', '#B20710'])
        plt.xlabel("Type")
        plt.ylabel("Count")
        st.pyplot(plt)
    else:
        st.warning("Please enter a search term.")