# -*- coding: utf-8 -*-
"""Netflix Recommendation App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_oZy-ddE7KOZNTWLxfP_pJzHuy9RkobR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import ipywidgets as widgets
from IPython.display import display
from IPython.display import HTML,display
import streamlit as st
warnings.filterwarnings('ignore')

# prompt: import a dataset from my system

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['netflix_titles.csv'])) #replace your_file.csv with your file name
df.head()

df.tail()

# Check for missing values
df.isnull().sum()

# Fill missing values
df['cast'].fillna('Unknown', inplace=True)
df['country'].fillna('Unknown', inplace=True)
df['director'].fillna('Unknown', inplace=True)

# Combine relevant columns for search
# Convert all columns to string type before concatenation
df['combined_features'] = df['title'].astype(str) + ' ' + \
                          df['cast'].astype(str) + ' ' + \
                          df['director'].astype(str) + ' ' + \
                          df['listed_in'].astype(str) + ' ' + \
                          df['description'].astype(str)

# Create a TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['combined_features'])

# Function to get recommendations
def get_recommendations(query, top_n=5, content_type='All'):
    query_vec = tfidf.transform([query])
    cosine_similarities = cosine_similarity(query_vec, tfidf_matrix).flatten()
    top_indices = cosine_similarities.argsort()[-top_n:][::-1]
    recommendations = df.iloc[top_indices]
    if content_type != 'All':
        recommendations = recommendations[recommendations['type'] == content_type]
    return recommendations

# Add custom CSS
st.markdown("""
<style>
    /* Title and header styling */
    .stTitle {
        color: #E50914;
        font-size: 40px;
        font-weight: bold;
        text-align: center;
    }
    .stMarkdown {
        font-size: 18px;
        text-align: center;
    }

    /* Input widget styling */
    .stTextInput>div>div>input {
        border: 2px solid #E50914;
        border-radius: 5px;
        padding: 10px;
        font-size: 16px;
    }
    .stSelectbox>div>div>select {
        border: 2px solid #E50914;
        border-radius: 5px;
        padding: 5px;
        font-size: 16px;
    }
    .stSlider>div>div>div>div {
        background-color: #E50914;
    }

    /* Button styling */
    .stButton>button {
        background-color: #E50914;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }
    .stButton>button:hover {
        background-color: #B20710;
    }

    /* Output styling */
    .stDataFrame {
        border: 2px solid #E50914;
        border-radius: 5px;
        padding: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Streamlit App
st.markdown("<h1 class='stTitle'>ðŸŽ¬ Netflix Recommendation App</h1>", unsafe_allow_html=True)
st.markdown("Welcome to the Netflix Recommendation App! Enter your preferences below to get personalized recommendations.", unsafe_allow_html=True)

# Input widgets
query = st.text_input("Enter a genre, actor, or keyword...", placeholder="e.g., comedy, Tom Hanks")
content_type = st.selectbox("Type", ['All', 'Movie', 'TV Show'])
top_n = st.slider("Number of Recommendations", 1, 20, 5)

# Get recommendations
if st.button("Get Recommendations"):
    if query:
        st.write(f"Searching for: **{query}**")
        recommendations = get_recommendations(query, top_n=top_n, content_type=content_type)
        st.write(f"Here are your top **{top_n}** recommendations:")
        st.dataframe(recommendations[['title', 'type', 'listed_in', 'description']])
    else:
        st.warning("Please enter a search term.")